/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.flink.streaming.paper.experiments;

import org.apache.flink.api.common.functions.MapFunction;
import org.apache.flink.api.java.tuple.Tuple4;
import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;

import java.text.DateFormat;
import java.text.SimpleDateFormat;


/**
 * This class reads an experiment setup generated by @link{DataGenerator} from a file and executes the experiments.
 * The results are written to a file.
 */
public class DEBSExpDriver {
	
	
	

	/**
	 * Main program: Runs all the test cases and writed the results to the specified output files.
	 *
	 * @param args not used,
	 * @throws Exception Any exception which may occurs at the runtime.
	 */
	public static void main(String[] args) throws Exception {

		StreamExecutionEnvironment env = StreamExecutionEnvironment.createLocalEnvironment(1);
		env.readTextFile(args[0]).map(new DEBSDataFormatter()).print();

		env.execute();
	}

	public static class DEBSDataFormatter implements MapFunction<String, Tuple4<Long, Long, Long, Integer>> {

		DateFormat dfm = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSSSSSX");

		@Override
		public Tuple4<Long, Long, Long, Integer> map(String line) throws Exception {
			String[] sensorVals = line.split("\t");
			//add measures into one
			long measure = Long.valueOf(sensorVals[2]) + Long.valueOf(sensorVals[3]) + Long.valueOf(sensorVals[4]);
			StringBuilder strBuilder = new StringBuilder();
			//create bin array of 21 sensor vals
			for (int i = 18; i < 27; i++) {
				strBuilder.append(sensorVals[i]);
			}
			for (int i = 30; i < 39; i++) {
				strBuilder.append(sensorVals[i]);
			}
			for (int i = 48; i < 51; i++) {
				strBuilder.append(sensorVals[i]);
			}
			return new Tuple4<>(dfm.parse(sensorVals[0])
					.getTime(), Long.valueOf(sensorVals[1]), measure, Integer.parseInt(strBuilder.toString(), 2));
		}
	}
}